
let currentIndex = 0;
    const items = document.querySelectorAll('.catalog-container');
    const totalItems = items.length;

    function showNextItem() {
        items[currentIndex].classList.remove('active');
        currentIndex = (currentIndex + 1) % totalItems; // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        items[currentIndex].classList.add('active');
    }
    setInterval(showNextItem, 3000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (3000 –º—Å = 3 —Å–µ–∫—É–Ω–¥—ã)
 

//–ù–ê–í–ò–ì–ê–¢–û–† –ü–†–û–ì–†–£–¢–ö–ê –°–¢–†–ê–ù–ò–¶–´

window.addEventListener("scroll", function() {
    var navigation = document.querySelector(".container-navigation");
    var adaptivNavigation = document.querySelector(".container-navigation-adaptiv-open");
    
    // –ï—Å–ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –±–æ–ª—å—à–µ 50px, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å 'scrolled'
    if (window.scrollY > 10) {
        navigation.classList.add("scrolled");
        adaptivNavigation.classList.add("scrolled");
    } else {
        navigation.classList.remove("scrolled");
        adaptivNavigation.classList.remove("scrolled");
    }
});

//–§–û–†–ú–ê –ó–ê–Ø–í–ö–ò –¢–û–í–ê–†–ê

document.addEventListener('DOMContentLoaded', function () {
    let currentQuestionFirst = 1;
    const totalQuestionsFirst = 5;

    const questionsFirst = [
        { label: "–¢–æ–≤–∞—Ä", placeholder: "–£–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä" },
        { label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", placeholder: "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞" },
        { label: "–ò–º—è", placeholder: "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è" },
        { label: "–¢–µ–ª–µ—Ñ–æ–Ω", placeholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" },
        { label: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", placeholder: "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."}
    ];

    const progressElementFirst = document.getElementById('progress-first');
    const questionCounterFirst = document.getElementById('question-counter-first');
    const formLabelFirst = document.getElementById('form-label-first');
    const inputFieldFirst = document.getElementById('input-field-first');
    const nextButtonFirst = document.getElementById('next-btn-first');
    const prevButtonFirst = document.getElementById('prev-btn-first');
    const auditFormFirst = document.getElementById('audit-form-first');
    const successMessageFirst = document.getElementById('success-message-first');
    const errorMessageFirst = document.getElementById('error-message-first');

    const answersFirst = new Array(totalQuestionsFirst).fill('');

    // –í–∞—à —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –≤ Telegram
    const telegramToken = '7565359008:AAG-mPWEY8luvPOldIehVgE7QTHru4yDI10';
    const chatId = '6388010174';

    function updateFormFirst() {
        const progressPercentFirst = (currentQuestionFirst / totalQuestionsFirst) * 100;
        progressElementFirst.style.width = `${progressPercentFirst}%`;
        questionCounterFirst.textContent = `–í–æ–ø—Ä–æ—Å ${currentQuestionFirst} / ${totalQuestionsFirst}`;

        formLabelFirst.textContent = questionsFirst[currentQuestionFirst - 1].label;
        inputFieldFirst.placeholder = questionsFirst[currentQuestionFirst - 1].placeholder;
        inputFieldFirst.type = "text";
        inputFieldFirst.value = answersFirst[currentQuestionFirst - 1] || '';
        errorMessageFirst.style.display = 'none';
        prevButtonFirst.style.display = currentQuestionFirst > 1 ? 'inline-block' : 'none';
    }

    function sendMessageToTelegramFirst() {
        const now = new Date();
        const day = String(now.getDate()).padStart(2, '0');
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const year = now.getFullYear();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const currentDate = `${day}.${month}.${year}`;
        const currentTime = `${hours}:${minutes}`;

        const message = `‚ùóÔ∏è–ó–∞—è–≤–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É. –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${currentDate}\n` +
                        `–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${currentTime}\n\n` +
                        `–¢–æ–≤–∞—Ä: ${answersFirst[0]}\n` +
                        `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${answersFirst[1]}\n` +
                        `–ò–º—è: ${answersFirst[2]}\n` +
                        `–¢–µ–ª–µ—Ñ–æ–Ω: ${answersFirst[3]}\n` +
                        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${answersFirst[4]}`;

        const url = `https://api.telegram.org/bot${telegramToken}/sendMessage`;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: message,
            }),
        })
        .then(response => response.json())
        .then(data => {
            console.log('Message sent to Telegram:', data);
        })
        .catch(error => {
            console.error('Error sending message to Telegram:', error);
        });
    }

    function goToNextQuestionFirst() {
        answersFirst[currentQuestionFirst - 1] = inputFieldFirst.value.trim();

        if (inputFieldFirst.value.trim() === '') {
            errorMessageFirst.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.';
            errorMessageFirst.style.display = 'block';
            return;
        }

        if (currentQuestionFirst === totalQuestionsFirst) {
            auditFormFirst.style.display = 'none';
            questionCounterFirst.style.display = 'none';
            successMessageFirst.style.display = 'block';

            sendMessageToTelegramFirst();
        } else {
            currentQuestionFirst++;
            updateFormFirst();
        }
    }

    nextButtonFirst.addEventListener('click', goToNextQuestionFirst);
    prevButtonFirst.addEventListener('click', function () {
        answersFirst[currentQuestionFirst - 1] = inputFieldFirst.value.trim();
        if (currentQuestionFirst > 1) {
            currentQuestionFirst--;
            updateFormFirst();
        }
    });

    inputFieldFirst.addEventListener('keydown', function (event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            goToNextQuestionFirst();
        }
    });

    updateFormFirst();
});

//–§–û–†–ú–ê –ó–ê–Ø–í–ö–ò –°–û–¢–†–£–î–ù–ò–ß–ï–°–¢–í–ê

document.addEventListener('DOMContentLoaded', function () {
    let currentQuestionSecond = 1;
    const totalQuestionsSecond = 5;

    const questionsSecond = [
        { label: "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", placeholder: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏" },
        { label: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –∏–ª–∏ –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä", placeholder: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∏–ª–∏ –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä" },
        { label: "–ò–º—è", placeholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" },
        { label: "–¢–µ–ª–µ—Ñ–æ–Ω", placeholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" },
        { label: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", placeholder: "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" }
    ];

    const progressElementSecond = document.getElementById('progress-second');
    const questionCounterSecond = document.getElementById('question-counter-second');
    const formLabelSecond = document.getElementById('form-label-second');
    const inputFieldSecond = document.getElementById('input-field-second');
    const nextButtonSecond = document.getElementById('next-btn-second');
    const prevButtonSecond = document.getElementById('prev-btn-second');
    const auditFormSecond = document.getElementById('audit-form-second');
    const successMessageSecond = document.getElementById('success-message-second');
    const errorMessageSecond = document.getElementById('error-message-second');

    const answersSecond = new Array(totalQuestionsSecond).fill('');

    // –í–∞—à —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –≤ Telegram
    const telegramToken = '7565359008:AAG-mPWEY8luvPOldIehVgE7QTHru4yDI10';
    const chatId = '6388010174';

    function updateFormSecond() {
        const progressPercentSecond = (currentQuestionSecond / totalQuestionsSecond) * 100;
        progressElementSecond.style.width = `${progressPercentSecond}%`;
        questionCounterSecond.textContent = `–í–æ–ø—Ä–æ—Å ${currentQuestionSecond} / ${totalQuestionsSecond}`;

        formLabelSecond.textContent = questionsSecond[currentQuestionSecond - 1].label;
        inputFieldSecond.placeholder = questionsSecond[currentQuestionSecond - 1].placeholder;
        inputFieldSecond.type = "text";
        inputFieldSecond.value = answersSecond[currentQuestionSecond - 1] || '';
        errorMessageSecond.style.display = 'none';
        prevButtonSecond.style.display = currentQuestionSecond > 1 ? 'inline-block' : 'none';
    }

    function sendMessageToTelegramSecond() {
        const now = new Date();
        const day = String(now.getDate()).padStart(2, '0');
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const year = now.getFullYear();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const currentDate = `${day}.${month}.${year}`;
        const currentTime = `${hours}:${minutes}`;

        const message = `ü§ù –ó–∞—è–≤–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É. –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${currentDate}\n` +
                        `–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${currentTime}\n\n` +
                        `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${answersSecond[0]}\n` +
                        `–ü–æ—Å—Ç–∞–≤—â–∏–∫ –∏–ª–∏ –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä: ${answersSecond[1]}\n` +
                        `–ò–º—è: ${answersSecond[2]}\n` +
                        `–¢–µ–ª–µ—Ñ–æ–Ω: ${answersSecond[3]}\n` +
                        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${answersSecond[4]}`;

        const url = `https://api.telegram.org/bot${telegramToken}/sendMessage`;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: message,
            }),
        })
        .then(response => response.json())
        .then(data => {
            console.log('Message sent to Telegram:', data);
        })
        .catch(error => {
            console.error('Error sending message to Telegram:', error);
        });
    }

    function goToNextQuestionSecond() {
        answersSecond[currentQuestionSecond - 1] = inputFieldSecond.value.trim();

        if (inputFieldSecond.value.trim() === '') {
            errorMessageSecond.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.';
            errorMessageSecond.style.display = 'block';
            return;
        }

        if (currentQuestionSecond === totalQuestionsSecond) {
            auditFormSecond.style.display = 'none';
            questionCounterSecond.style.display = 'none';
            successMessageSecond.style.display = 'block';

            sendMessageToTelegramSecond();
        } else {
            currentQuestionSecond++;
            updateFormSecond();
        }
    }

    nextButtonSecond.addEventListener('click', goToNextQuestionSecond);
    prevButtonSecond.addEventListener('click', function () {
        answersSecond[currentQuestionSecond - 1] = inputFieldSecond.value.trim();
        if (currentQuestionSecond > 1) {
            currentQuestionSecond--;
            updateFormSecond();
        }
    });

    inputFieldSecond.addEventListener('keydown', function (event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            goToNextQuestionSecond();
        }
    });

    updateFormSecond();
});

// –û–¢–ö–†–´–¢–ò–ï –ò –ó–ê–ö–†–´–¢–ò–ï –ú–ï–ù–Æ

// –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –º–µ–Ω—é
const openMenuButton = document.querySelector('.navigation-open-menu-adaptiv-open');
const closeMenuButton = document.querySelector('.navigation-close-menu-adaptiv-close');
const adaptivOpenMenu = document.querySelector('.container-navigation-adaptiv-open');
const adaptivCloseMenu = document.querySelector('.container-navigation-adaptiv-close');

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
openMenuButton.addEventListener('click', () => {
    adaptivOpenMenu.style.display = 'none'; // –°–∫—Ä—ã—Ç—å –∑–Ω–∞—á–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
    adaptivCloseMenu.style.display = 'flex'; // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–æ–µ –º–µ–Ω—é
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
closeMenuButton.addEventListener('click', () => {
    adaptivOpenMenu.style.display = 'flex'; // –ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
    adaptivCloseMenu.style.display = 'none'; // –°–∫—Ä—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–æ–µ –º–µ–Ω—é
});
